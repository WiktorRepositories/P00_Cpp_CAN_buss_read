#include <stdint.h>
#include "mcp_can.h"
#include "CustomStructures.h"

#ifndef _MY_CAN_H
#define _MY_CAN_H

#define SEPARATE_COPY

#define MYCAN_CAN_BUFFER_SIZE 0x08
#define MYCAN_ERROR_NO_DATA 0x11
#define MYCAN_ERROR_MAX     0x22   
#define MYCAN_ERROR_MIN     0x33

#define MYCAN_CAN_ID_1      600UL
#define MYCAN_CAN_ID_2      601UL
#define MYCAN_CAN_ID_3      602UL
#define MYCAN_CAN_ID_4      603UL
#define MYCAN_CAN_ID_5      604UL
#define MYCAN_CAN_ID_6      605UL
#define MYCAN_CAN_ID_7      606UL

/****************************************************************************************************
 * @name        DecodeCANDataClass
 * @brief       This class prepare data recieced by CAN buss to actual structures.
 * @note        This class is using pointers to global structures that contain decoded packages.
*/
class DecodeCANDataClass
{
private:
/**************************************************************
* Referance data for global structures */
    CanData1_t& refPackage1;
    CanData2_t& refPackage2;
    CanData3_t& refPackage3;
    CanData4_t& refPackage4;
    CanData5_t& refPackage5;
    CanData6_t& refPackage6;
    CanData7_t& refPackage7;
//=============================================================

/**************************************************************
* Private methods */
    // Poliporhism for check function depend of data types
    void CheckValues(valueParameters_uint8_t* pdata);
    void CheckValues(valueParameters_int16_t* pdata);
    void CheckValues(valueParameters_float_t* pdata);

    // Universal coppy methode
    void MoveData(uint8_t* pSrcPtr, uint8_t* pDestPtr, uint8_t dataLenght);

    // Decode metods for each packages
    void DecodePackage1(uint8_t* pBuffer);
    void DecodePackage2(uint8_t* pBuffer);
    void DecodePackage3(uint8_t* pBuffer);
    void DecodePackage4(uint8_t* pBuffer);
    void DecodePackage5(uint8_t* pBuffer);
    void DecodePackage6(uint8_t* pBuffer);
    void DecodePackage7(uint8_t* pBuffer);
//=============================================================

public:
/**************************************************************
* Class constructor and deconstructor */
    DecodeCANDataClass(CanData1_t& refCAN1, CanData2_t& refCAN2, CanData3_t& refCAN3, CanData4_t& refCAN4, CanData5_t& refCAN5, CanData6_t& refCAN6, CanData7_t& refCAN7);
    ~DecodeCANDataClass(void);
//=============================================================
    
    // Public call for decode can data
    void CallForReadCanData(CAN_data_undecoded_t* pCanData);
};

//=======================================================================================================
// Other functions
//=======================================================================================================

/***************************************************************************************************
   @brief   CAN communication procedure used pointer to MCP_CAN class.
   @param   pMcpCan  Pointer of type (MCP_CAN*) to initialized object.
   @param   pCanData Pointer of type (CAN_data_undecoded_t*) to recieved  data from CN buss.
   @return  void
   @note    This function decodes CAN data to global structure.
*/
void ReadCanDataBy_MCP_CAN(MCP_CAN* pMcpCan, CAN_data_undecoded_t* pCanData); 

#endif //_MY_DEF_H